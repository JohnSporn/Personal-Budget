@page "/recurringexpenses/delete"
@using Microsoft.EntityFrameworkCore
@using Budget.Models
@inject IDbContextFactory<Budget.Data.BudgetContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>RecurringExpense</h2>
    <hr />
    @if (recurringexpense is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@recurringexpense.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@recurringexpense.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Amount</dt>
            <dd class="col-sm-10">@recurringexpense.Amount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PaymentFrequency</dt>
            <dd class="col-sm-10">@recurringexpense.PaymentFrequency</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PaymentDate</dt>
            <dd class="col-sm-10">@recurringexpense.PaymentDate</dd>
        </dl>
        <EditForm method="post" Model="recurringexpense" OnValidSubmit="DeleteRecurringExpense" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(recurringexpense is null)">Delete</button> |
            <a href="/recurringexpenses">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private RecurringExpense? recurringexpense;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        recurringexpense = await context.RecurringExpense.FirstOrDefaultAsync(m => m.Id == Id);

        if (recurringexpense is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteRecurringExpense()
    {
        using var context = DbFactory.CreateDbContext();
        context.RecurringExpense.Remove(recurringexpense!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/recurringexpenses");
    }
}
