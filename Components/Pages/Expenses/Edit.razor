@page "/recurringexpenses/edit"
@using Microsoft.EntityFrameworkCore
@using Budget.Models
@inject IDbContextFactory<Budget.Data.BudgetContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>RecurringExpense</h2>
<hr />
@if (RecurringExpense is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="RecurringExpense" OnValidSubmit="UpdateRecurringExpense" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="RecurringExpense.Id" value="@RecurringExpense.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="RecurringExpense.Name" class="form-control" />
                    <ValidationMessage For="() => RecurringExpense.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="RecurringExpense.Description" class="form-control" />
                    <ValidationMessage For="() => RecurringExpense.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="amount" class="form-label">Amount:</label>
                    <InputNumber id="amount" @bind-Value="RecurringExpense.Amount" class="form-control" />
                    <ValidationMessage For="() => RecurringExpense.Amount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="paymentfrequency" class="form-label">PaymentFrequency:</label>
                    <InputText id="paymentfrequency" @bind-Value="RecurringExpense.PaymentFrequency" class="form-control" />
                    <ValidationMessage For="() => RecurringExpense.PaymentFrequency" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="paymentdate" class="form-label">PaymentDate:</label>
                    <InputDate id="paymentdate" @bind-Value="RecurringExpense.PaymentDate" class="form-control" />
                    <ValidationMessage For="() => RecurringExpense.PaymentDate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/recurringexpenses">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private RecurringExpense? RecurringExpense { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        RecurringExpense ??= await context.RecurringExpense.FirstOrDefaultAsync(m => m.Id == Id);

        if (RecurringExpense is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateRecurringExpense()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(RecurringExpense!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RecurringExpenseExists(RecurringExpense!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/recurringexpenses");
    }

    private bool RecurringExpenseExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.RecurringExpense.Any(e => e.Id == id);
    }
}
